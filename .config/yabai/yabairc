#!/usr/bin/env sh

# load scripting additions
sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"


# bsp or float (default: bsp)
#yabai -m config layout bsp

#find ~/Library/Parallels/Applications\ Menus/ -maxdepth 3 -type f | awk -F'/' '{ print $NF; }' | awk '{$1=$1};1' | sort | uniq | tr "\n" "\0" | xargs -0 -I{} yabai -m rule --add app="^{}\$" title=".*" manage=on

######### CONFIG #################
# New window spawns to the right if vertical split, or bottom if horizontal split
yabai -m config window_placement second_child
# floating windows are always on top (default: off)
yabai -m config window_topmost off

# modify window shadows (default: on, options: on, off, float)
# example: show shadows only for floating windows
yabai -m config window_shadow float
yabai -m config window_opacity on
yabai -m config window_opacity_duration 0.00
yabai -m config active_window_opacity 1.0
yabai -m config normal_window_opacity 0.8

## enable window focus highlight
yabai -m config window_border on
yabai -m config window_border_width 1
yabai -m config active_window_border_color 0xFF40FF00
yabai -m config normal_window_border_color 0x00FFFFFF
yabai -m config insert_feedback_color        0xffd75f5f

## some other settings
yabai -m config auto_balance off
yabai -m config split_ratio 0.50

## mouse support
# set focus follows mouse mode (default: off, options: off, autoraise, autofocus)
yabai -m config focus_follows_mouse autofocus
# set mouse follows focus mode (default: off)
yabai -m config mouse_follows_focus on
# set mouse interaction modifier key (default: fn)
yabai -m config mouse_modifier ctrl
# set modifier + right-click drag to resize window (default: resize)
yabai -m config mouse_action2 resize
# set modifier + left-click drag to resize window (default: move)
yabai -m config mouse_action1 move

# general space settings
#yabai -m config focused_border_skip_floating  1
#yabai -m config --space 3 layout             float

## Change how yabai looks
yabai -m config layout bsp
yabai -m config top_padding 0
yabai -m config bottom_padding 0
yabai -m config left_padding 0
yabai -m config right_padding 0
yabai -m config window_gap 0

######### SPACES SETUP ##########  (Reference: https://d12frosted.io/posts/2022-04-23-yabai-spaces.html)
# delete extra spaces (only 6 in this case)
for _ in $(yabai -m query --spaces | jq '.[].index | select(. > 6)'); do
  yabai -m space --destroy 7
done

# create spaces
function setup_space {
  local idx="$1"
  local name="$2"
  local space=
  echo "setup space $idx : $name"

  space=$(yabai -m query --spaces --space "$idx")
  if [ -z "$space" ]; then
    yabai -m space --create 
  fi

  yabai -m space "$idx" --label "$name"
}

setup_space 1 code
setup_space 2 web
setup_space 3 comm
setup_space 4 other
setup_space 5 terminal
setup_space 6 notes

# move some apps automatically to specific spaces
# (it is possible to use the add ^ to the space number to focus on this space on launch e.g: space=^1)
yabai -m rule --add app="^(Google Chrome|Firefox|Safari)$" space=1 
yabai -m rule --add app="^(Code|RStudio)$" space=2  
yabai -m rule --add app="^(Slack|WhatsApp|Mail)$" space=3 manage=off 
# adding apps that are not assigned to other spaces (app!=**) to space 4
# yabai -m rule --add app!="^(Spotlight|Google Chrome|Firefox|Safari|Code|Slack|WhatsApp|Mail|iTerm2|Notion)$" space=4 
yabai -m rule --add app="^iTerm2$" space=5 # --display=2 (not working, only adding app to first space available in the display)
yabai -m rule --add app="^Notion$" space=6 
# locking spaces into displays
# yabai -m rule --add space=1 --display=1
# yabai -m rule --add space=2 --display=1
# yabai -m rule --add space=3 --display=1
# yabai -m rule --add space=4 --display=1
# yabai -m rule --add space=5 --display=2
# yabai -m rule --add space=6 --display=2
# # bai -m rule --add app="^(Code|RStudio)$" space=2
# # Jetbrains aliJ IDEA|WebStorm|RubyMine|PyCharm|DataGrip)$"
# apps="^(IntelliJ IDEA|WebStorm|RubyMine|PyCharm|DataGrip)$"
# ya# bai -m rule --add app="${apps}" space=3  manage=off
# # Terminal
# ya# bai -m rule --add app="^(Alacritty)$" space=4
# # Music
# yabai -m rule --add app="^(Slack|WhatsApp|Microsoft T

## Exceptions for yabai: float system preferences. 
yabai -m rule --add app="^System Preferences$" sticky=on layer=above manage=off
yabai -m rule --add app="^Karabiner-Elements$" sticky=on layer=above manage=off
yabai -m rule --add app="^Karabiner-EventViewer$" sticky=on layer=above manage=off
yabai -m rule --add app="^Finder$" sticky=off layer=above manage=off
yabai -m rule --add app="^Keka$" sticky=on layer=above manage=off
yabai -m rule --add app="^Disk Utility$" sticky=on layer=above manage=off
yabai -m rule --add app="^System Information$" sticky=on layer=above manage=off
yabai -m rule --add app="^Activity Monitor$" sticky=on layer=above manage=off
yabai -m rule --add app="^Path Finder$" manage=off
yabai -m rule --add app="^TeamViewer$" sticky=off layer=above manage=off
yabai -m rule --add app="^Spotify$" manage=off
# yabai -m rule --add app="^iTerm2$" manage=off
yabai -m rule --add app="^Flux$" manage=off
yabai -m rule --add app="^Time Out$" manage=off
yabai -m rule --add app="^perl_client_app$" manage=off
yabai -m rule --add app="^console$" manage=off
yabai -m rule --add app="^Cisco" manage=off
yabai -m rule --add app="^Private Internet Access$" manage=off
# #Ubersicht widget bar stuff
#yabai -m signal --add event=space_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-primary-jsx\"'"
#yabai -m signal --add event=display_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-primary-jsx\"'"

#yabai -m signal --add event=space_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-secondary-jsx\"'"
#yabai -m signal --add event=display_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-secondary-jsx\"'"

# signals
# yabai -m signal --add event=window_destroyed action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse"
#yabai -m signal --add event=space_changed action="yabai -m window --focus $(yabai -m query --windows --window | jq ".id")"
# yabai -m signal --add event=application_terminated action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse"

#testing signals
# yabai -m signal --add event=window_destroyed action="terminal-notifier -message 'window_destroyed'"
# yabai -m signal --add event=application_terminated action="terminal-notifier -message 'application_terminated'"

## If I close the active window, focus on any other visible window.
yabai -m signal --add event=window_destroyed action="bash /Users/jesseskelton/CustomScripts/SwitchSpaces/window-focus-on-destroy.sh"
# yabai -m signal --add event=space_changed action="export CUR_ACTIVE_APP=\"iTerm2\""

echo "yabai configuration loaded.."

#END
